v1: |
  你的任务是利用历史查询的上下文，解析并替换当前查询中的指代不明词语，使其更清晰、更具体。

  主要任务：
  1. 仔细分析历史查询和当前查询，理解它们之间的语义关联。
  2. 明确识别当前查询中所有指代不明的词语或短语（例如："他"、"她"、"这个"、"那个"、"该演员"、"男主" 等）。
  3. 从历史查询中找到最相关的、更具体的人名、实体或描述来替换这些指代不明的部分。
  4. 特别处理以下场景：
     - 重复询问：当遇到"重新回答"、"再说一遍"等表达时，需要还原原始问题
     - 纠错反馈：当遇到"回答错了"、"不对"等反馈时，后续的重复询问需要保持原始问题的完整性
     - 补充说明：当用户要求"说详细点"、"解释一下"等，需要保持原主题
     - 答案依赖：当代词指代依赖于上一个问题的答案而非问题本身时，不进行改写
  5. 改写后的查询必须保持原始意图，且更完整、更独立。
  6. 只进行必要的替换和补充，不要添加无关信息或改变问题核心。
  7. 当前查询与历史查询之间必须存在明确的语义关联，才进行改写。
  8. 改写后的查询必须语句通顺、自然流畅，符合日常语言表达习惯。
  9. 严格遵循以下约束：
     - 保持原始查询的语言（如英文查询保持英文，中文查询保持中文）
     - 不要改变问题的类型（如陈述句不变疑问句，简单句不变复杂句）
     - 保留原始查询的语气和表达方式
  10. 需要特别注意二选一或多选一问题后的指代：
      - 如果上一个问题是"A和B哪个更好？"，当前问题是"它怎么样？"
      - 此时"它"的指代取决于问题的回答，而非问题本身
      - 此类情况下，不应进行改写，保持原始查询

  示例 1 (人名替换)：
  历史：
  Q1: 小明来自哪里
  当前查询: 他在美团工作吗
  改写结果: 小明在美团工作吗

  示例 2 (描述替换)：
  历史：
  Q1: 这个杀手不太冷男主是谁？
  当前查询: 这个男主出演了哪些电影？
  改写结果: 这个杀手不太冷的男主出演了哪些电影？

  示例 3 (不改写)：
  历史：
  Q1: 今天天气怎么样？
  当前查询: 北京明天会下雨吗？
  改写结果: 北京明天会下雨吗？（无关联，无需改写）

  示例 4 (人名替换，拼写错误)：
  历史：
  Q1: 吴宇佳来自哪各学校
  Q2: 她喜欢打羽毛球不
  Q3: 她之前在哪个工作
  当前查询: 她在哪个学校毕业
  改写结果: 吴宇佳在哪个学校毕业

  示例 5 (复杂语义关联)：
  历史：
  Q1: 义乌工商职业技术学院2025年高层次人才引进计划招聘多少人？
  Q2: 这些岗位的年龄要求分别是多少？
  当前查询: 招聘对象包括哪些人群？
  改写结果: 义乌工商职业技术学院2025年高层次人才引进计划的招聘对象包括哪些人群？

  示例 6 (保持语言一致性)：
  历史：
  Q1: why Kelvin found so brave
  Q2: is he superman
  当前查询: maybe ironman
  改写结果: Kelvin is so brave, maybe he is ironman

  示例 7 (混合语言输入)：
  历史：
  Q1: 李白是哪个朝代的诗人？
  Q2: 他的成名作是什么？
  当前查询: his most famous poem?
  改写结果: 李白's most famous poem?

  示例 8 (重复询问场景)：
  历史：
  Q1: 四化是什么
  Q2: 回答错了
  当前查询: 重新回答下把，还是没回答对
  改写结果: 请重新回答四化是什么

  示例 9 (纠错反馈场景)：
  历史：
  Q1: 中国有多少个省份？
  Q2: 这个数字不对
  当前查询: 麻烦再确认下
  改写结果: 请再确认中国有多少个省份

  示例 10 (补充说明场景)：
  历史：
  Q1: 什么是人工智能？
  Q2: 没太明白
  当前查询: 能说得详细一点吗
  改写结果: 能详细解释下什么是人工智能吗

  示例 11 (答案依赖场景)：
  历史：
  Q1: Unity和Unreal Engine在性能上有什么区别？
  Q2: Unity的优势是什么？
  Q3: Unreal Engine的图形表现力如何？
  Q4: Unity适合做什么类型的游戏？
  Q5: 哪个更适合初学者入门？
  当前查询: 它适合做啥类型游戏？
  改写结果: 它适合做啥类型游戏？（需要保持原样，因为"它"指代依赖于上一个问题的答案）

  示例 12 (二选一后的指代场景)：
  历史：
  Q1: Python和Java哪个更高效？
  当前查询: 它的内存管理怎么样？
  改写结果: 它的内存管理怎么样？（不改写，指代依赖答案）

  输出要求：
  只输出最终改写后的查询文本。

  历史查询：
  {history_text}

  当前查询：
  {current_query}

  改写后查询：

v2: |
  你的任务是利用历史查询的上下文，解析并替换当前查询中的指代不明词语，使其更清晰、更具体。

  **改写规则：**
  1. 仔细分析历史查询和当前查询，确认它们之间存在明确的语义关联。
  2. 替换当前查询中的指代词（如"他"、"她"、"它"、"这个"、"那个"）为历史查询中的具体实体。
  3. 补充缺失的主语或关键信息，使查询独立完整。
  4. 对于短查询（3个词以内）：
     - 必须确认与历史查询高度相关才进行改写
     - 不要强行添加可能改变原意的信息
     - 不确定时保持原样
  
  **重要约束：**
  1. 保持原始查询的意图、语言和表达方式
  2. 只进行必要的替换和补充，不添加无关信息
  3. 不要过度推断或猜测用户意图
  4. 当代词指代依赖于上一个问题的答案而非问题本身时，不进行改写
  
  **示例：**
  1. 历史："小明来自哪里"，当前查询："他在美团工作吗" -> "小明在美团工作吗"
  2. 历史："这个杀手不太冷男主是谁？"，当前查询："这个男主出演了哪些电影？" -> "这个杀手不太冷的男主出演了哪些电影？"
  3. 历史："新三样"，当前查询："三化" -> "三化"（保持原样，关联不明确）
  4. 历史："张冬雨的哪张照片应是什么"，当前查询："那个照片应是什么" -> "那个照片应是什么"（保持原样，指代不明确）
  5. 历史："Python和Java哪个更高效？"，当前查询："它的内存管理怎么样？" -> "它的内存管理怎么样？"（不改写，指代依赖答案）

  **输出要求：**
  只输出最终改写后的查询文本，不包含任何解释。

  历史查询：
  {history_text}

  当前查询：
  {current_query}

  改写后查询：

v3: |
  <task>
  你的任务是利用历史查询的上下文，改写当前查询使其更清晰、更具体、更独立。
  
  改写规则：
  1. 仔细分析历史查询和当前查询，确认它们之间存在明确的语义关联
  2. 替换当前查询中的指代词（如"他"、"她"、"它"、"这个"、"那个"）为历史查询中的具体实体
  3. 补充缺失的主语或关键信息，使查询独立完整
  4. 当查询涉及历史对话中提到的专业概念、技术术语或具体场景时，适当补充相关上下文信息
  5. 对于短查询（3个词以内）必须确认与历史查询高度相关才进行改写
  
  重要约束：
  - 保持原始查询的意图、语言和表达方式
  - 只进行必要的替换和补充，不添加无关信息
  - 不要过度推断或猜测用户意图
  - 当代词指代依赖于上一个问题的答案而非问题本身时，不进行改写
  - 优先利用历史对话中的关键实体、场景、技术领域等信息来丰富查询
  </task>
  
  <examples>
      <example>
         <history>
            Q1: 小明来自哪里？
            A1: 小明来自北京。
         </history>
         <current_query>他在美团工作吗</current_query>
         <rewritten_query>小明在美团工作吗</rewritten_query>
      </example>
      
      <example>
         <history>
            Q1: Python和Java哪个更高效？
            A1: 在不同场景下各有优势，Python开发效率高，Java运行效率好。
         </history>
         <current_query>它的内存管理怎么样？</current_query>
         <rewritten_query>它的内存管理怎么样？</rewritten_query>
      </example>
      
      <example>
         <history>
            Q1: 我们企业想要部署5G专网，中国移动有哪些解决方案？
            A1: 中国移动提供多种5G专网解决方案，包括独立专网、共享专网和混合专网。可根据企业需求选择不同的网络切片服务，支持工业互联网、智慧园区、远程医疗等应用场景。
         </history>
         <current_query>网络切片技术是怎么工作的？</current_query>
         <rewritten_query>中国移动5G专网中的网络切片技术是怎么工作的？</rewritten_query>
      </example>
  </examples>
  
  <history>
  {history_text}
  </history>
  
  <current_query>{current_query}</current_query>
  
  <output_instruction>
  只输出最终改写后的查询文本，不包含任何解释。
  </output_instruction>
  
  <rewritten_query>